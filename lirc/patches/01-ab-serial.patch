--- a/drivers/lirc_serial/lirc_serial.c
+++ b/drivers/lirc_serial/lirc_serial.c
@@ -1,14 +1,13 @@
-/*
- * lirc_serial.c
+ /* lirc_serial.c
  *
  * lirc_serial - Device driver that records pulse- and pause-lengths
- *	       (space-lengths) between DDCD event on a serial port.
+ *	      (space-lengths) (just like the lirc_serial driver does)
+ *	      between GPIO interrupt events on the Raspberry Pi.
+ *	      Lots of code has been taken from the lirc_serial module,
+ *	      so I would like say thanks to the authors.
  *
- * Copyright (C) 1996,97 Ralph Metzler <rjkm@thp.uni-koeln.de>
- * Copyright (C) 1998 Trent Piepho <xyzzy@u.washington.edu>
- * Copyright (C) 1998 Ben Pfaff <blp@gnu.org>
- * Copyright (C) 1999 Christoph Bartelmus <lirc@bartelmus.de>
- * Copyright (C) 2007 Andrei Tanas <andrei@tanas.ca> (suspend/resume support)
+ * Copyright (C) 2012 Aron Robert Szabo <aron@reon.hu>,
+ *		      Michael Bishop <cleverca22@gmail.com>
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
  *  the Free Software Foundation; either version 2 of the License, or
@@ -22,104 +21,39 @@
  *  You should have received a copy of the GNU General Public License
  *  along with this program; if not, write to the Free Software
  *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- *
- */
-
-/*
- * Steve's changes to improve transmission fidelity:
- *   - for systems with the rdtsc instruction and the clock counter, a
- *     send_pule that times the pulses directly using the counter.
- *     This means that the LIRC_SERIAL_TRANSMITTER_LATENCY fudge is
- *     not needed. Measurement shows very stable waveform, even where
- *     PCI activity slows the access to the UART, which trips up other
- *     versions.
- *   - For other system, non-integer-microsecond pulse/space lengths,
- *     done using fixed point binary. So, much more accurate carrier
- *     frequency.
- *   - fine tuned transmitter latency, taking advantage of fractional
- *     microseconds in previous change
- *   - Fixed bug in the way transmitter latency was accounted for by
- *     tuning the pulse lengths down - the send_pulse routine ignored
- *     this overhead as it timed the overall pulse length - so the
- *     pulse frequency was right but overall pulse length was too
- *     long. Fixed by accounting for latency on each pulse/space
- *     iteration.
- *
- * Steve Davies <steve@daviesfam.org>  July 2001
  */
 
 #include <linux/module.h>
 #include <linux/errno.h>
-#include <linux/signal.h>
-#include <linux/sched.h>
-#include <linux/fs.h>
 #include <linux/interrupt.h>
-#include <linux/ioport.h>
+#include <linux/sched.h>
 #include <linux/kernel.h>
-#include <linux/serial_reg.h>
 #include <linux/time.h>
 #include <linux/string.h>
-#include <linux/types.h>
-#include <linux/wait.h>
-#include <linux/mm.h>
 #include <linux/delay.h>
-#include <linux/poll.h>
 #include <linux/platform_device.h>
-
-#include <asm/system.h>
-#include <linux/io.h>
 #include <linux/irq.h>
-#include <linux/fcntl.h>
 #include <linux/spinlock.h>
-
-#ifdef CONFIG_LIRC_SERIAL_NSLU2
-#include <asm/hardware.h>
-#endif
-/* From Intel IXP42X Developer's Manual (#252480-005): */
-/* ftp://download.intel.com/design/network/manuals/25248005.pdf */
-#define UART_IE_IXP42X_UUE   0x40 /* IXP42X UART Unit enable */
-#define UART_IE_IXP42X_RTOIE 0x10 /* IXP42X Receiver Data Timeout int.enable */
-
-#include "drivers/kcompat.h"
-#if LINUX_VERSION_CODE > KERNEL_VERSION(2, 6, 35)
 #include <media/lirc.h>
 #include <media/lirc_dev.h>
-#else
-#include "drivers/lirc.h"
-#include "drivers/lirc_dev/lirc_dev.h"
-#endif
+#include <linux/gpio.h>
 
-#define LIRC_DRIVER_NAME "lirc_serial"
+// AB - test raw mode
+#include <linux/io.h>
+#include <linux/ioport.h>
+#include <asm/mach-ath79/ar71xx_regs.h>
+#include <asm/mach-ath79/ath79.h>
+// AB - test raw mode
 
-struct lirc_serial {
-	int signal_pin;
-	int signal_pin_change;
-	u8 on;
-	u8 off;
-	long (*send_pulse)(unsigned long length);
-	void (*send_space)(long length);
-	int features;
-	spinlock_t lock;
-};
+#define LIRC_DRIVER_NAME "lirc_serial"
+#define RBUF_LEN 256
+#define LIRC_TRANSMITTER_LATENCY 256
 
-#define LIRC_HOMEBREW		0
-#define LIRC_IRDEO		1
-#define LIRC_IRDEO_REMOTE	2
-#define LIRC_ANIMAX		3
-#define LIRC_IGOR		4
-#define LIRC_NSLU2		5
-
-/*** module parameters ***/
-static int type;
-static int io;
-static int irq;
-static int iommap;
-static int ioshift;
-static int softcarrier = 1;
-static int share_irq;
-static int debug;
-static int sense = -1;	/* -1 = auto, 0 = active high, 1 = active low */
-static int txsense;	/* 0 = active high, 1 = active low */
+#ifndef MAX_UDELAY_MS
+#define MAX_UDELAY_US 5000
+#else
+#define MAX_UDELAY_US (MAX_UDELAY_MS*1000)
+#endif
 
 #define dprintk(fmt, args...)					\
 	do {							\
@@ -128,227 +62,92 @@ static int txsense;	/* 0 = active high,
 			       fmt, ## args);			\
 	} while (0)
 
-/* forward declarations */
-static long send_pulse_irdeo(unsigned long length);
-static long send_pulse_homebrew(unsigned long length);
-static void send_space_irdeo(long length);
-static void send_space_homebrew(long length);
-
-static struct lirc_serial hardware[] = {
-	[LIRC_HOMEBREW] = {
-		.signal_pin        = UART_MSR_DCD,
-		.signal_pin_change = UART_MSR_DDCD,
-		.on  = (UART_MCR_RTS | UART_MCR_OUT2 | UART_MCR_DTR),
-		.off = (UART_MCR_RTS | UART_MCR_OUT2),
-		.send_pulse = send_pulse_homebrew,
-		.send_space = send_space_homebrew,
-#ifdef CONFIG_LIRC_SERIAL_TRANSMITTER
-		.features    = (LIRC_CAN_SET_SEND_DUTY_CYCLE |
-				LIRC_CAN_SET_SEND_CARRIER |
-				LIRC_CAN_SEND_PULSE | LIRC_CAN_REC_MODE2)
-#else
-		.features    = LIRC_CAN_REC_MODE2
-#endif
-	},
-
-	[LIRC_IRDEO] = {
-		.signal_pin        = UART_MSR_DSR,
-		.signal_pin_change = UART_MSR_DDSR,
-		.on  = UART_MCR_OUT2,
-		.off = (UART_MCR_RTS | UART_MCR_DTR | UART_MCR_OUT2),
-		.send_pulse  = send_pulse_irdeo,
-		.send_space  = send_space_irdeo,
-		.features    = (LIRC_CAN_SET_SEND_DUTY_CYCLE |
-				LIRC_CAN_SEND_PULSE | LIRC_CAN_REC_MODE2)
-	},
-
-	[LIRC_IRDEO_REMOTE] = {
-		.signal_pin        = UART_MSR_DSR,
-		.signal_pin_change = UART_MSR_DDSR,
-		.on  = (UART_MCR_RTS | UART_MCR_DTR | UART_MCR_OUT2),
-		.off = (UART_MCR_RTS | UART_MCR_DTR | UART_MCR_OUT2),
-		.send_pulse  = send_pulse_irdeo,
-		.send_space  = send_space_irdeo,
-		.features    = (LIRC_CAN_SET_SEND_DUTY_CYCLE |
-				LIRC_CAN_SEND_PULSE | LIRC_CAN_REC_MODE2)
-	},
-
-	[LIRC_ANIMAX] = {
-		.signal_pin        = UART_MSR_DCD,
-		.signal_pin_change = UART_MSR_DDCD,
-		.on  = 0,
-		.off = (UART_MCR_RTS | UART_MCR_DTR | UART_MCR_OUT2),
-		.send_pulse = NULL,
-		.send_space = NULL,
-		.features   = LIRC_CAN_REC_MODE2
-	},
-
-	[LIRC_IGOR] = {
-		.signal_pin        = UART_MSR_DSR,
-		.signal_pin_change = UART_MSR_DDSR,
-		.on  = (UART_MCR_RTS | UART_MCR_OUT2 | UART_MCR_DTR),
-		.off = (UART_MCR_RTS | UART_MCR_OUT2),
-		.send_pulse = send_pulse_homebrew,
-		.send_space = send_space_homebrew,
-#ifdef CONFIG_LIRC_SERIAL_TRANSMITTER
-		.features    = (LIRC_CAN_SET_SEND_DUTY_CYCLE |
-				LIRC_CAN_SET_SEND_CARRIER |
-				LIRC_CAN_SEND_PULSE | LIRC_CAN_REC_MODE2)
-#else
-		.features    = LIRC_CAN_REC_MODE2
-#endif
-	},
-
-#ifdef CONFIG_LIRC_SERIAL_NSLU2
-	/*
-	 * Modified Linksys Network Storage Link USB 2.0 (NSLU2):
-	 * We receive on CTS of the 2nd serial port (R142,LHS), we
-	 * transmit with a IR diode between GPIO[1] (green status LED),
-	 * and ground (Matthias Goebl <matthias.goebl@goebl.net>).
-	 * See also http://www.nslu2-linux.org for this device
-	 */
-	[LIRC_NSLU2] = {
-		.signal_pin        = UART_MSR_CTS,
-		.signal_pin_change = UART_MSR_DCTS,
-		.on  = (UART_MCR_RTS | UART_MCR_OUT2 | UART_MCR_DTR),
-		.off = (UART_MCR_RTS | UART_MCR_OUT2),
-		.send_pulse = send_pulse_homebrew,
-		.send_space = send_space_homebrew,
-#ifdef CONFIG_LIRC_SERIAL_TRANSMITTER
-		.features    = (LIRC_CAN_SET_SEND_DUTY_CYCLE |
-				LIRC_CAN_SET_SEND_CARRIER |
-				LIRC_CAN_SEND_PULSE | LIRC_CAN_REC_MODE2)
-#else
-		.features    = LIRC_CAN_REC_MODE2
-#endif
-	},
-#endif
-
-};
-
-#define RS_ISR_PASS_LIMIT 256
+/* module parameters */
 
-/*
- * A long pulse code from a remote might take up to 300 bytes.  The
- * daemon should read the bytes as soon as they are generated, so take
- * the number of keys you think you can push before the daemon runs
- * and multiply by 300.  The driver will warn you if you overrun this
- * buffer.  If you have a slow computer or non-busmastering IDE disks,
- * maybe you will need to increase this.
- */
+/* set the default GPIO input pin */
+static int gpio_in_pin = 7;
+/* set the default GPIO output pin */
+static int gpio_out_pin = 29;
+/* enable debugging messages */
+static int debug;
+/* -1 = auto, 0 = active high, 1 = active low */
+static int sense = -1;
+/* use softcarrier by default */
+static int softcarrier = 1;
 
-/* This MUST be a power of two!  It has to be larger than 1 as well. */
+//struct gpio_chip *gpiochip;
+struct irq_chip *irqchip;
+struct irq_data *irqdata;
+int irq;
 
-#define RBUF_LEN 256
+/* forward declarations */
+static long send_pulse(unsigned long length);
+static void send_space(long length);
+static void lirc_serial_exit(void);
 
-static struct timeval lasttv = {0, 0};
+int valid_gpio_pins[] = { 0, 1, 4, 8, 7, 9, 10, 11, 14, 15, 16, 17, 18, 21, 22, 23,
+	24, 25, 29, -1 };
 
+static struct platform_device *lirc_serial_dev;
+static struct timeval lasttv = { 0, 0 };
 static struct lirc_buffer rbuf;
+static spinlock_t lock;
 
+/* initialized/set in init_timing_params() */
 static unsigned int freq = 38000;
 static unsigned int duty_cycle = 50;
-
-/* Initialized in init_timing_params() */
 static unsigned long period;
 static unsigned long pulse_width;
 static unsigned long space_width;
 
-#if defined(__i386__)
-/*
- * From:
- * Linux I/O port programming mini-HOWTO
- * Author: Riku Saikkonen <Riku.Saikkonen@hut.fi>
- * v, 28 December 1997
- *
- * [...]
- * Actually, a port I/O instruction on most ports in the 0-0x3ff range
- * takes almost exactly 1 microsecond, so if you're, for example, using
- * the parallel port directly, just do additional inb()s from that port
- * to delay.
- * [...]
- */
-/* transmitter latency 1.5625us 0x1.90 - this figure arrived at from
- * comment above plus trimming to match actual measured frequency.
- * This will be sensitive to cpu speed, though hopefully most of the 1.5us
- * is spent in the uart access.  Still - for reference test machine was a
- * 1.13GHz Athlon system - Steve
- */
-
-/*
- * changed from 400 to 450 as this works better on slower machines;
- * faster machines will use the rdtsc code anyway
- */
-#define LIRC_SERIAL_TRANSMITTER_LATENCY 450
-
-#else
-
-/* does anybody have information on other platforms ? */
-/* 256 = 1<<8 */
-#define LIRC_SERIAL_TRANSMITTER_LATENCY 256
-
-#endif  /* __i386__ */
-/*
- * FIXME: should we be using hrtimers instead of this
- * LIRC_SERIAL_TRANSMITTER_LATENCY nonsense?
- */
-
-/* fetch serial input packet (1 byte) from register offset */
-static u8 sinp(int offset)
+static void ab__ath79_gpio_irq_reset(unsigned int gpio)
 {
-	if (iommap != 0)
-		/* the register is memory-mapped */
-		offset <<= ioshift;
+	// int p;
+        void __iomem *base = ath79_gpio_base;
+
+	// reset GPIO_INT_PENDING
+        // For edge sensitive interrupts, this register is read-with-clear
+	// __raw_readl(base + 0x20);
+        __raw_writel(0, base + 0x20);
+
+	// change polarity
+	if( gpio_get_value(gpio)==0 )
+        	__raw_writel(1 << gpio, base + 0x1C);
+	else
+		__raw_writel(0, base + 0x1C);
 
-	return inb(io + offset);
 }
 
-/* write serial output packet (1 byte) of value to register offset */
-static void soutp(int offset, u8 value)
+static void ab__ath79_gpio_irq_unmask(unsigned int gpio)
 {
-	if (iommap != 0)
-		/* the register is memory-mapped */
-		offset <<= ioshift;
+        void __iomem *base = ath79_gpio_base;
 
-	outb(value, io + offset);
-}
+	// Edge
+        __raw_writel(1 << gpio, base + 0x18); //AR71XX_GPIO_REG_INT_TYPE);
+        //__raw_writel(0, base + 0x18); //AR71XX_GPIO_REG_INT_TYPE);
 
-static void on(void)
-{
-#ifdef CONFIG_LIRC_SERIAL_NSLU2
-	/*
-	 * On NSLU2, we put the transmit diode between the output of the green
-	 * status LED and ground
-	 */
-	if (type == LIRC_NSLU2) {
-		gpio_line_set(NSLU2_LED_GRN, IXP4XX_GPIO_LOW);
-		return;
-	}
-#endif
-	if (txsense)
-		soutp(UART_MCR, hardware[type].off);
+	// polarity
+	if( gpio_get_value(gpio)==0 )
+        	__raw_writel(1 << gpio, base + 0x1C);
 	else
-		soutp(UART_MCR, hardware[type].on);
+		__raw_writel(0, base + 0x1C);
+
+	// not TODELETE
+	// INT_MASK
+        __raw_writel(1 << gpio, base + 0x24); //AR71XX_GPIO_REG_INT_ENABLE);
+
+	// Interrupt enable
+        __raw_writel(1 << gpio, base + 0x14); //AR71XX_GPIO_REG_INT_MODE);
+
 }
 
-static void off(void)
+static void ab__ath79_gpio_irq_mask(unsigned int gpio)
 {
-#ifdef CONFIG_LIRC_SERIAL_NSLU2
-	if (type == LIRC_NSLU2) {
-		gpio_line_set(NSLU2_LED_GRN, IXP4XX_GPIO_HIGH);
-		return;
-	}
-#endif
-	if (txsense)
-		soutp(UART_MCR, hardware[type].on);
-	else
-		soutp(UART_MCR, hardware[type].off);
-}
+        void __iomem *base = ath79_gpio_base;
 
-#ifndef MAX_UDELAY_MS
-#define MAX_UDELAY_US 5000
-#else
-#define MAX_UDELAY_US (MAX_UDELAY_MS*1000)
-#endif
+	// IRQ disable
+        __raw_writel(0, base + 0x14);
+}
 
 static void safe_udelay(unsigned long usecs)
 {
@@ -359,68 +158,18 @@ static void safe_udelay(unsigned long us
 	udelay(usecs);
 }
 
-#ifdef USE_RDTSC
-/*
- * This is an overflow/precision juggle, complicated in that we can't
- * do long long divide in the kernel
- */
-
-/*
- * When we use the rdtsc instruction to measure clocks, we keep the
- * pulse and space widths as clock cycles.  As this is CPU speed
- * dependent, the widths must be calculated in init_port and ioctl
- * time
- */
-
-/* So send_pulse can quickly convert microseconds to clocks */
-static unsigned long conv_us_to_clocks;
-
 static int init_timing_params(unsigned int new_duty_cycle,
-		unsigned int new_freq)
+	unsigned int new_freq)
 {
-	__u64 loops_per_sec, work;
-
-	duty_cycle = new_duty_cycle;
-	freq = new_freq;
-
-	loops_per_sec = current_cpu_data.loops_per_jiffy;
-	loops_per_sec *= HZ;
-
-	/* How many clocks in a microsecond?, avoiding long long divide */
-	work = loops_per_sec;
-	work *= 4295;  /* 4295 = 2^32 / 1e6 */
-	conv_us_to_clocks = (work >> 32);
-
 	/*
-	 * Carrier period in clocks, approach good up to 32GHz clock,
-	 * gets carrier frequency within 8Hz
+	 * period, pulse/space width are kept with 8 binary places -
+	 * IE multiplied by 256.
 	 */
-	period = loops_per_sec >> 3;
-	period /= (freq >> 3);
-
-	/* Derive pulse and space from the period */
-	pulse_width = period * duty_cycle / 100;
-	space_width = period - pulse_width;
-	dprintk("in init_timing_params, freq=%d, duty_cycle=%d, "
-		"clk/jiffy=%ld, pulse=%ld, space=%ld, "
-		"conv_us_to_clocks=%ld\n",
-		freq, duty_cycle, current_cpu_data.loops_per_jiffy,
-		pulse_width, space_width, conv_us_to_clocks);
-	return 0;
-}
-#else /* ! USE_RDTSC */
-static int init_timing_params(unsigned int new_duty_cycle,
-		unsigned int new_freq)
-{
-/*
- * period, pulse/space width are kept with 8 binary places -
- * IE multiplied by 256.
- */
 	if (256 * 1000000L / new_freq * new_duty_cycle / 100 <=
-	    LIRC_SERIAL_TRANSMITTER_LATENCY)
+	    LIRC_TRANSMITTER_LATENCY)
 		return -EINVAL;
 	if (256 * 1000000L / new_freq * (100 - new_duty_cycle) / 100 <=
-	    LIRC_SERIAL_TRANSMITTER_LATENCY)
+	    LIRC_TRANSMITTER_LATENCY)
 		return -EINVAL;
 	duty_cycle = new_duty_cycle;
 	freq = new_freq;
@@ -431,166 +180,53 @@ static int init_timing_params(unsigned i
 		"space=%ld\n", freq, pulse_width, space_width);
 	return 0;
 }
-#endif /* USE_RDTSC */
-
-
-/* return value: space length delta */
-
-static long send_pulse_irdeo(unsigned long length)
-{
-	long rawbits, ret;
-	int i;
-	unsigned char output;
-	unsigned char chunk, shifted;
-
-	/* how many bits have to be sent ? */
-	rawbits = length * 1152 / 10000;
-	if (duty_cycle > 50)
-		chunk = 3;
-	else
-		chunk = 1;
-	for (i = 0, output = 0x7f; rawbits > 0; rawbits -= 3) {
-		shifted = chunk << (i * 3);
-		shifted >>= 1;
-		output &= (~shifted);
-		i++;
-		if (i == 3) {
-			soutp(UART_TX, output);
-			while (!(sinp(UART_LSR) & UART_LSR_THRE))
-				;
-			output = 0x7f;
-			i = 0;
-		}
-	}
-	if (i != 0) {
-		soutp(UART_TX, output);
-		while (!(sinp(UART_LSR) & UART_LSR_TEMT))
-			;
-	}
-
-	if (i == 0)
-		ret = (-rawbits) * 10000 / 1152;
-	else
-		ret = (3 - i) * 3 * 10000 / 1152 + (-rawbits) * 10000 / 1152;
-
-	return ret;
-}
-
-#ifdef USE_RDTSC
-/* Version that uses Pentium rdtsc instruction to measure clocks */
-
-/*
- * This version does sub-microsecond timing using rdtsc instruction,
- * and does away with the fudged LIRC_SERIAL_TRANSMITTER_LATENCY
- * Implicitly i586 architecture...  - Steve
- */
-
-static long send_pulse_homebrew_softcarrier(unsigned long length)
-{
-	int flag;
-	unsigned long target, start, now;
-
-	/* Get going quick as we can */
-	rdtscl(start);
-	on();
-	/* Convert length from microseconds to clocks */
-	length *= conv_us_to_clocks;
-	/* And loop till time is up - flipping at right intervals */
-	now = start;
-	target = pulse_width;
-	flag = 1;
-	/*
-	 * FIXME: This looks like a hard busy wait, without even an occasional,
-	 * polite, cpu_relax() call.  There's got to be a better way?
-	 *
-	 * The i2c code has the result of a lot of bit-banging work, I wonder if
-	 * there's something there which could be helpful here.
-	 */
-	while ((now - start) < length) {
-		/* Delay till flip time */
-		do {
-			rdtscl(now);
-		} while ((now - start) < target);
-
-		/* flip */
-		if (flag) {
-			rdtscl(now);
-			off();
-			target += space_width;
-		} else {
-			rdtscl(now); on();
-			target += pulse_width;
-		}
-		flag = !flag;
-	}
-	rdtscl(now);
-	return ((now - start) - length) / conv_us_to_clocks;
-}
-#else /* ! USE_RDTSC */
-/* Version using udelay() */
-
-/*
- * here we use fixed point arithmetic, with 8
- * fractional bits.  that gets us within 0.1% or so of the right average
- * frequency, albeit with some jitter in pulse length - Steve
- */
-
-/* To match 8 fractional bits used for pulse/space length */
 
-static long send_pulse_homebrew_softcarrier(unsigned long length)
+static long send_pulse_softcarrier(unsigned long length)
 {
 	int flag;
 	unsigned long actual, target, d;
+
 	length <<= 8;
 
 	actual = 0; target = 0; flag = 0;
 	while (actual < length) {
 		if (flag) {
-			off();
+			gpio_set_value(gpio_out_pin, 0);
 			target += space_width;
 		} else {
-			on();
+			gpio_set_value(gpio_out_pin, 1);
 			target += pulse_width;
 		}
 		d = (target - actual -
-		     LIRC_SERIAL_TRANSMITTER_LATENCY + 128) >> 8;
+		     LIRC_TRANSMITTER_LATENCY + 128) >> 8;
 		/*
 		 * Note - we've checked in ioctl that the pulse/space
 		 * widths are big enough so that d is > 0
 		 */
 		udelay(d);
-		actual += (d << 8) + LIRC_SERIAL_TRANSMITTER_LATENCY;
+		actual += (d << 8) + LIRC_TRANSMITTER_LATENCY;
 		flag = !flag;
 	}
 	return (actual-length) >> 8;
 }
-#endif /* USE_RDTSC */
 
-static long send_pulse_homebrew(unsigned long length)
+static long send_pulse(unsigned long length)
 {
 	if (length <= 0)
 		return 0;
 
-	if (softcarrier)
-		return send_pulse_homebrew_softcarrier(length);
-	else {
-		on();
+	if (softcarrier) {
+		return send_pulse_softcarrier(length);
+	} else {
+		gpio_set_value(gpio_out_pin, 1);
 		safe_udelay(length);
 		return 0;
 	}
 }
 
-static void send_space_irdeo(long length)
-{
-	if (length <= 0)
-		return;
-
-	safe_udelay(length);
-}
-
-static void send_space_homebrew(long length)
+static void send_space(long length)
 {
-	off();
+	gpio_set_value(gpio_out_pin, 0);
 	if (length <= 0)
 		return;
 	safe_udelay(length);
@@ -649,378 +285,289 @@ static void frbwrite(int l)
 	rbwrite(l);
 }
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 19)
-static irqreturn_t irq_handler(int i, void *blah)
-#else
+static int _signal_;
+static int irqs1;
+static int irqs2;
+
 static irqreturn_t irq_handler(int i, void *blah, struct pt_regs *regs)
-#endif
 {
 	struct timeval tv;
-	int counter, dcd;
-	u8 status;
 	long deltv;
 	int data;
-	static int last_dcd = -1;
-
-	if ((sinp(UART_IIR) & UART_IIR_NO_INT)) {
-		/* not our interrupt */
-		return IRQ_NONE;
-	}
-
-	counter = 0;
-	do {
-		counter++;
-		status = sinp(UART_MSR);
-		if (counter > RS_ISR_PASS_LIMIT) {
-			printk(KERN_WARNING LIRC_DRIVER_NAME ": AIEEEE: "
-			       "We're caught!\n");
-			break;
-		}
-		if ((status & hardware[type].signal_pin_change)
-		    && sense != -1) {
-			/* get current time */
-			do_gettimeofday(&tv);
+	int signal;
 
-			/* New mode, written by Trent Piepho
-			   <xyzzy@u.washington.edu>. */
-
-			/*
-			 * The old format was not very portable.
-			 * We now use an int to pass pulses
-			 * and spaces to user space.
-			 *
-			 * If PULSE_BIT is set a pulse has been
-			 * received, otherwise a space has been
-			 * received.  The driver needs to know if your
-			 * receiver is active high or active low, or
-			 * the space/pulse sense could be
-			 * inverted. The bits denoted by PULSE_MASK are
-			 * the length in microseconds. Lengths greater
-			 * than or equal to 16 seconds are clamped to
-			 * PULSE_MASK.  All other bits are unused.
-			 * This is a much simpler interface for user
-			 * programs, as well as eliminating "out of
-			 * phase" errors with space/pulse
-			 * autodetection.
-			 */
-
-			/* calc time since last interrupt in microseconds */
-			dcd = (status & hardware[type].signal_pin) ? 1 : 0;
-
-			if (dcd == last_dcd) {
+	/* use the GPIO signal level */
+	signal = gpio_get_value(gpio_in_pin);
+	irqs1++;
+
+	/* clear irq pending */
+	ab__ath79_gpio_irq_reset(gpio_in_pin);
+
+	if( signal==_signal_ )
+		return IRQ_HANDLED;
+
+	irqs2++;
+	_signal_ = signal;
+
+	if (sense != -1) {
+		/* get current time */
+		do_gettimeofday(&tv);
+
+		/* calc time since last interrupt in microseconds */
+		deltv = tv.tv_sec-lasttv.tv_sec;
+		if (tv.tv_sec < lasttv.tv_sec ||
+		    (tv.tv_sec == lasttv.tv_sec &&
+		     tv.tv_usec < lasttv.tv_usec)) {
+			printk(KERN_WARNING LIRC_DRIVER_NAME
+			       ": AIEEEE: your clock just jumped backwards\n");
+			printk(KERN_WARNING LIRC_DRIVER_NAME
+			       ": %d %d %lx %lx %lx %lx\n", signal, sense,
+			       tv.tv_sec, lasttv.tv_sec,
+			       tv.tv_usec, lasttv.tv_usec);
+			data = PULSE_MASK;
+		} else if (deltv > 15) {
+			data = PULSE_MASK; /* really long time */
+			if (!(signal^sense)) {
+				/* sanity check */
 				printk(KERN_WARNING LIRC_DRIVER_NAME
-				": ignoring spike: %d %d %lx %lx %lx %lx\n",
-				dcd, sense,
-				tv.tv_sec, lasttv.tv_sec,
-				tv.tv_usec, lasttv.tv_usec);
-				continue;
-			}
-
-			deltv = tv.tv_sec-lasttv.tv_sec;
-			if (tv.tv_sec < lasttv.tv_sec ||
-			    (tv.tv_sec == lasttv.tv_sec &&
-			     tv.tv_usec < lasttv.tv_usec)) {
-				printk(KERN_WARNING LIRC_DRIVER_NAME
-				       ": AIEEEE: your clock just jumped "
-				       "backwards\n");
-				printk(KERN_WARNING LIRC_DRIVER_NAME
-				       ": %d %d %lx %lx %lx %lx\n",
-				       dcd, sense,
-				       tv.tv_sec, lasttv.tv_sec,
+				       ": AIEEEE: %d %d %lx %lx %lx %lx\n",
+				       signal, sense, tv.tv_sec, lasttv.tv_sec,
 				       tv.tv_usec, lasttv.tv_usec);
-				data = PULSE_MASK;
-			} else if (deltv > 15) {
-				data = PULSE_MASK; /* really long time */
-				if (!(dcd^sense)) {
-					/* sanity check */
-					printk(KERN_WARNING LIRC_DRIVER_NAME
-					       ": AIEEEE: "
-					       "%d %d %lx %lx %lx %lx\n",
-					       dcd, sense,
-					       tv.tv_sec, lasttv.tv_sec,
-					       tv.tv_usec, lasttv.tv_usec);
-					/*
-					 * detecting pulse while this
-					 * MUST be a space!
-					 */
-					sense = sense ? 0 : 1;
-				}
-			} else
-				data = (int) (deltv*1000000 +
-					       tv.tv_usec -
-					       lasttv.tv_usec);
-			frbwrite(dcd^sense ? data : (data|PULSE_BIT));
-			lasttv = tv;
-			last_dcd = dcd;
-			wake_up_interruptible(&rbuf.wait_poll);
+				/*
+				 * detecting pulse while this
+				 * MUST be a space!
+				 */
+				sense = sense ? 0 : 1;
+			}
+		} else {
+			data = (int) (deltv*1000000 +
+				      (tv.tv_usec - lasttv.tv_usec));
 		}
-	} while (!(sinp(UART_IIR) & UART_IIR_NO_INT)); /* still pending ? */
+		frbwrite(signal^sense ? data : (data|PULSE_BIT));
+		lasttv = tv;
+		wake_up_interruptible(&rbuf.wait_poll);
+	}
+
 	return IRQ_HANDLED;
 }
 
-
-static int hardware_init_port(void)
+static int init_port(void)
 {
-	u8 scratch, scratch2, scratch3;
+	int i, nlow, nhigh, ret;
 
-	/*
-	 * This is a simple port existence test, borrowed from the autoconfig
-	 * function in drivers/serial/8250.c
-	 */
-	scratch = sinp(UART_IER);
-	soutp(UART_IER, 0);
-#ifdef __i386__
-	outb(0xff, 0x080);
-#endif
-	scratch2 = sinp(UART_IER) & 0x0f;
-	soutp(UART_IER, 0x0f);
-#ifdef __i386__
-	outb(0x00, 0x080);
-#endif
-	scratch3 = sinp(UART_IER) & 0x0f;
-	soutp(UART_IER, scratch);
-	if (scratch2 != 0 || scratch3 != 0x0f) {
-		/* we fail, there's nothing here */
-		printk(KERN_ERR LIRC_DRIVER_NAME ": port existence test "
-		       "failed, cannot continue\n");
-		return -EINVAL;
+	if (gpio_request(gpio_out_pin, LIRC_DRIVER_NAME " ir/out")) {
+		printk(KERN_ALERT LIRC_DRIVER_NAME
+		       ": cant claim gpio pin %d (warning)\n", gpio_out_pin);
 	}
 
-
-
-	/* Set DLAB 0. */
-	soutp(UART_LCR, sinp(UART_LCR) & (~UART_LCR_DLAB));
-
-	/* First of all, disable all interrupts */
-	soutp(UART_IER, sinp(UART_IER) &
-	      (~(UART_IER_MSI|UART_IER_RLSI|UART_IER_THRI|UART_IER_RDI)));
-
-	/* Clear registers. */
-	sinp(UART_LSR);
-	sinp(UART_RX);
-	sinp(UART_IIR);
-	sinp(UART_MSR);
-
-#ifdef CONFIG_LIRC_SERIAL_NSLU2
-	if (type == LIRC_NSLU2) {
-		/* Setup NSLU2 UART */
-
-		/* Enable UART */
-		soutp(UART_IER, sinp(UART_IER) | UART_IE_IXP42X_UUE);
-		/* Disable Receiver data Time out interrupt */
-		soutp(UART_IER, sinp(UART_IER) & ~UART_IE_IXP42X_RTOIE);
-		/* set out2 = interrupt unmask; off() doesn't set MCR
-		   on NSLU2 */
-		soutp(UART_MCR, UART_MCR_RTS|UART_MCR_OUT2);
+	if( gpio_in_pin< 0)
+	{
+		irq = -1;
+		printk(KERN_ALERT LIRC_DRIVER_NAME
+		       ": not using reciever on gpio %d\n", gpio_in_pin);
 	}
-#endif
-
-	/* Set line for power source */
-	off();
+	else
+	{
+		if (gpio_request(gpio_in_pin, LIRC_DRIVER_NAME " ir/in")) {
+			printk(KERN_ALERT LIRC_DRIVER_NAME
+			       ": cant claim gpio pin %d\n", gpio_in_pin);
+			ret = -ENODEV;
+			goto exit_gpio_free_out_pin;
+		}
 
-	/* Clear registers again to be sure. */
-	sinp(UART_LSR);
-	sinp(UART_RX);
-	sinp(UART_IIR);
-	sinp(UART_MSR);
-
-	switch (type) {
-	case LIRC_IRDEO:
-	case LIRC_IRDEO_REMOTE:
-		/* setup port to 7N1 @ 115200 Baud */
-		/* 7N1+start = 9 bits at 115200 ~ 3 bits at 38kHz */
-
-		/* Set DLAB 1. */
-		soutp(UART_LCR, sinp(UART_LCR) | UART_LCR_DLAB);
-		/* Set divisor to 1 => 115200 Baud */
-		soutp(UART_DLM, 0);
-		soutp(UART_DLL, 1);
-		/* Set DLAB 0 +  7N1 */
-		soutp(UART_LCR, UART_LCR_WLEN7);
-		/* THR interrupt already disabled at this point */
-		break;
-	default:
-		break;
+		gpio_direction_input(gpio_in_pin);
+		//irq = gpio_to_irq(gpio_in_pin);
+		//irq = 0x20 + gpio_in_pin;;
+		irq = 10;
+		//irq = -1;
 	}
 
-	return 0;
-}
-
-static int init_port(void)
-{
-	int i, nlow, nhigh;
+	gpio_direction_output(gpio_out_pin, 0);
 
-	/* Reserve io region. */
-	/*
-	 * Future MMAP-Developers: Attention!
-	 * For memory mapped I/O you *might* need to use ioremap() first,
-	 * for the NSLU2 it's done in boot code.
-	 */
-	if (((iommap != 0)
-	     && (request_mem_region(iommap, 8 << ioshift,
-				    LIRC_DRIVER_NAME) == NULL))
-	   || ((iommap == 0)
-	       && (request_region(io, 8, LIRC_DRIVER_NAME) == NULL))) {
-		printk(KERN_ERR  LIRC_DRIVER_NAME
-		       ": port %04x already in use\n", io);
-		printk(KERN_WARNING LIRC_DRIVER_NAME
-		       ": use 'setserial /dev/ttySX uart none'\n");
-		printk(KERN_WARNING LIRC_DRIVER_NAME
-		       ": or compile the serial port driver as module and\n");
-		printk(KERN_WARNING LIRC_DRIVER_NAME
-		       ": make sure this module is loaded first\n");
-		return -EBUSY;
-	}
+	printk("to_irq %d\n", irq);
 
-	if (hardware_init_port() < 0)
-		return -EINVAL;
+	if( irq>= 0 )
+	{
+		irqdata = irq_get_irq_data(irq);
 
-	/* Initialize pulse/space widths */
-	init_timing_params(duty_cycle, freq);
+		// added  irqdata->chip->irq_set_type
+		// if (irqdata && irqdata->chip && irqdata->chip->irq_set_type ) {
+		if (irqdata && irqdata->chip) {
+			irqchip = irqdata->chip;
+		} else {
+			printk("cannot get irqdata %d\n", irq);
+			irq = -ENODEV;
+			// ret = -ENODEV;
+			gpio_free(gpio_in_pin);
+			return 0;
+		}
 
-	/* If pin is high, then this must be an active low receiver. */
-	if (sense == -1) {
-		/* wait 1/2 sec for the power supply */
-		msleep(500);
+		/* if pin is high, then this must be an active low receiver. */
+		if (sense == -1) {
+			/* wait 1/2 sec for the power supply */
+			msleep(500);
 
-		/*
-		 * probe 9 times every 0.04s, collect "votes" for
-		 * active high/low
-		 */
-		nlow = 0;
-		nhigh = 0;
-		for (i = 0; i < 9; i++) {
-			if (sinp(UART_MSR) & hardware[type].signal_pin)
-				nlow++;
-			else
-				nhigh++;
-			msleep(40);
+			/*
+			 * probe 9 times every 0.04s, collect "votes" for
+			 * active high/low
+			 */
+			nlow = 0;
+			nhigh = 0;
+			for (i = 0; i < 9; i++) {
+				if (gpio_get_value(gpio_in_pin))
+					nlow++;
+				else
+					nhigh++;
+				msleep(40);
+			}
+			sense = (nlow >= nhigh ? 1 : 0);
+			printk(KERN_INFO LIRC_DRIVER_NAME
+			       ": auto-detected active %s receiver on GPIO pin %d\n",
+			       sense ? "low" : "high", gpio_in_pin);
+		} else {
+			printk(KERN_INFO LIRC_DRIVER_NAME
+			       ": manually using active %s receiver on GPIO pin %d\n",
+			       sense ? "low" : "high", gpio_in_pin);
 		}
-		sense = (nlow >= nhigh ? 1 : 0);
-		printk(KERN_INFO LIRC_DRIVER_NAME  ": auto-detected active "
-		       "%s receiver\n", sense ? "low" : "high");
-	} else
-		printk(KERN_INFO LIRC_DRIVER_NAME  ": Manually using active "
-		       "%s receiver\n", sense ? "low" : "high");
+	}
 
 	return 0;
+
+	exit_gpio_free_in_pin:
+	gpio_free(gpio_in_pin);
+
+	exit_gpio_free_out_pin:
+	gpio_free(gpio_out_pin);
+
+	exit_init_port:
+	return ret;
 }
 
+// called when the character device is opened
 static int set_use_inc(void *data)
 {
 	int result;
 	unsigned long flags;
 
+	irqs1=0;
+	irqs2=0;
 	/* initialize timestamp */
 	do_gettimeofday(&lasttv);
 
-	result = request_irq(irq, irq_handler,
-			     IRQF_DISABLED | (share_irq ? IRQF_SHARED : 0),
-			     LIRC_DRIVER_NAME, (void *)&hardware);
+	/* initialize pulse/space widths */
+	init_timing_params(duty_cycle, freq);
+
+	if( irq<0 )
+		return 0;
+
+	result = request_irq(irq,
+			     (irq_handler_t) irq_handler, 0,
+			     LIRC_DRIVER_NAME, (void*) 0);
 
 	switch (result) {
 	case -EBUSY:
-		printk(KERN_ERR LIRC_DRIVER_NAME ": IRQ %d busy\n", irq);
+		printk(KERN_ERR LIRC_DRIVER_NAME
+		       ": IRQ %d is busy\n",
+		      irq);
 		return -EBUSY;
 	case -EINVAL:
 		printk(KERN_ERR LIRC_DRIVER_NAME
 		       ": Bad irq number or handler\n");
 		return -EINVAL;
+	case -ENOMEM:
+		printk(KERN_ERR LIRC_DRIVER_NAME
+		       ": Could not allocate enough memory\n");
+		return -ENOMEM;
+	case -ENXIO:
+		printk(KERN_ERR LIRC_DRIVER_NAME
+		       ": Invalid irq number or handler\n");
+		return -ENXIO;
 	default:
-		dprintk("Interrupt %d, port %04x obtained\n", irq, io);
+		dprintk("Interrupt %d obtained\n",
+			irq);
 		break;
 	};
 
-	spin_lock_irqsave(&hardware[type].lock, flags);
-
-	/* Set DLAB 0. */
-	soutp(UART_LCR, sinp(UART_LCR) & (~UART_LCR_DLAB));
+	spin_lock_irqsave(&lock, flags);
+	 _signal_=gpio_get_value(gpio_in_pin);
 
-	soutp(UART_IER, sinp(UART_IER)|UART_IER_MSI);
+	/* unmask the irq */
+	ab__ath79_gpio_irq_unmask(gpio_in_pin);
 
-	spin_unlock_irqrestore(&hardware[type].lock, flags);
+	spin_unlock_irqrestore(&lock, flags);
 
 	return 0;
 }
 
 static void set_use_dec(void *data)
-{	unsigned long flags;
+{
+	unsigned long flags;
 
-	spin_lock_irqsave(&hardware[type].lock, flags);
+	if( irq<0 )
+		return;
+
+	spin_lock_irqsave(&lock, flags);
+
+	/* GPIO Pin Falling/Rising Edge Detect Disable */
+	// AB TODO
+	// irqchip->irq_set_type(irqdata, 0);
+	// AB TODO
+	// irqchip->irq_mask(irqdata);
 
-	/* Set DLAB 0. */
-	soutp(UART_LCR, sinp(UART_LCR) & (~UART_LCR_DLAB));
+	ab__ath79_gpio_irq_mask(gpio_in_pin);
+	spin_unlock_irqrestore(&lock, flags);
 
-	/* First of all, disable all interrupts */
-	soutp(UART_IER, sinp(UART_IER) &
-	      (~(UART_IER_MSI|UART_IER_RLSI|UART_IER_THRI|UART_IER_RDI)));
-	spin_unlock_irqrestore(&hardware[type].lock, flags);
+	free_irq(irq, (void *) 0);
 
-	free_irq(irq, (void *)&hardware);
+	dprintk("Interrupts: %d/%d\n",irqs1,irqs2);
 
-	dprintk("freed IRQ %d\n", irq);
+	dprintk(KERN_INFO LIRC_DRIVER_NAME
+		": freed IRQ %d\n", irq);
 }
 
 static ssize_t lirc_write(struct file *file, const char *buf,
-			 size_t n, loff_t *ppos)
+	size_t n, loff_t *ppos)
 {
 	int i, count;
 	unsigned long flags;
 	long delta = 0;
 	int *wbuf;
 
-	if (!(hardware[type].features & LIRC_CAN_SEND_PULSE))
-		return -EBADF;
-
 	count = n / sizeof(int);
 	if (n % sizeof(int) || count % 2 == 0)
 		return -EINVAL;
 	wbuf = memdup_user(buf, n);
 	if (IS_ERR(wbuf))
 		return PTR_ERR(wbuf);
-	spin_lock_irqsave(&hardware[type].lock, flags);
-	if (type == LIRC_IRDEO) {
-		/* DTR, RTS down */
-		on();
-	}
+
+	dprintk(": lirc_write %d pulse/space\n",count);
+
+	spin_lock_irqsave(&lock, flags);
+
 	for (i = 0; i < count; i++) {
 		if (i%2)
-			hardware[type].send_space(wbuf[i] - delta);
+			send_space(wbuf[i] - delta);
 		else
-			delta = hardware[type].send_pulse(wbuf[i]);
+			delta = send_pulse(wbuf[i]);
 	}
-	off();
-	spin_unlock_irqrestore(&hardware[type].lock, flags);
+	gpio_set_value(gpio_out_pin, 0);
+
+	spin_unlock_irqrestore(&lock, flags);
 	kfree(wbuf);
 	return n;
 }
 
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 35)
-static int lirc_ioctl(struct inode *node, struct file *filep, unsigned int cmd,
-		      unsigned long arg)
-#else
 static long lirc_ioctl(struct file *filep, unsigned int cmd, unsigned long arg)
-#endif
 {
 	int result;
 	__u32 value;
 
 	switch (cmd) {
 	case LIRC_GET_SEND_MODE:
-		if (!(hardware[type].features&LIRC_CAN_SEND_MASK))
-			return -ENOIOCTLCMD;
-
-		result = put_user(LIRC_SEND2MODE
-				  (hardware[type].features&LIRC_CAN_SEND_MASK),
-				  (__u32 *) arg);
-		if (result)
-			return result;
+		return -ENOIOCTLCMD;
 		break;
 
 	case LIRC_SET_SEND_MODE:
-		if (!(hardware[type].features&LIRC_CAN_SEND_MASK))
-			return -ENOIOCTLCMD;
-
 		result = get_user(value, (__u32 *) arg);
 		if (result)
 			return result;
@@ -1035,9 +582,6 @@ static long lirc_ioctl(struct file *file
 
 	case LIRC_SET_SEND_DUTY_CYCLE:
 		dprintk("SET_SEND_DUTY_CYCLE\n");
-		if (!(hardware[type].features&LIRC_CAN_SET_SEND_DUTY_CYCLE))
-			return -ENOIOCTLCMD;
-
 		result = get_user(value, (__u32 *) arg);
 		if (result)
 			return result;
@@ -1048,9 +592,6 @@ static long lirc_ioctl(struct file *file
 
 	case LIRC_SET_SEND_CARRIER:
 		dprintk("SET_SEND_CARRIER\n");
-		if (!(hardware[type].features&LIRC_CAN_SET_SEND_CARRIER))
-			return -ENOIOCTLCMD;
-
 		result = get_user(value, (__u32 *) arg);
 		if (result)
 			return result;
@@ -1060,11 +601,7 @@ static long lirc_ioctl(struct file *file
 		break;
 
 	default:
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 35)
-		return lirc_dev_fop_ioctl(node, filep, cmd, arg);
-#else
 		return lirc_dev_fop_ioctl(filep, cmd, arg);
-#endif
 	}
 	return 0;
 }
@@ -1072,18 +609,12 @@ static long lirc_ioctl(struct file *file
 static const struct file_operations lirc_fops = {
 	.owner		= THIS_MODULE,
 	.write		= lirc_write,
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 35)
-	.ioctl		= lirc_ioctl,
-#else
 	.unlocked_ioctl	= lirc_ioctl,
-#ifdef CONFIG_COMPAT
-	.compat_ioctl	= lirc_ioctl,
-#endif
-#endif
 	.read		= lirc_dev_fop_read,
 	.poll		= lirc_dev_fop_poll,
 	.open		= lirc_dev_fop_open,
 	.release	= lirc_dev_fop_close,
+	.llseek		= no_llseek,
 };
 
 static struct lirc_driver driver = {
@@ -1101,70 +632,10 @@ static struct lirc_driver driver = {
 	.owner		= THIS_MODULE,
 };
 
-static struct platform_device *lirc_serial_dev;
-
-static int __devinit lirc_serial_probe(struct platform_device *dev)
-{
-	return 0;
-}
-
-static int __devexit lirc_serial_remove(struct platform_device *dev)
-{
-	return 0;
-}
-
-static int lirc_serial_suspend(struct platform_device *dev,
-			       pm_message_t state)
-{
-	/* Set DLAB 0. */
-	soutp(UART_LCR, sinp(UART_LCR) & (~UART_LCR_DLAB));
-
-	/* Disable all interrupts */
-	soutp(UART_IER, sinp(UART_IER) &
-	      (~(UART_IER_MSI|UART_IER_RLSI|UART_IER_THRI|UART_IER_RDI)));
-
-	/* Clear registers. */
-	sinp(UART_LSR);
-	sinp(UART_RX);
-	sinp(UART_IIR);
-	sinp(UART_MSR);
-
-	return 0;
-}
-
-/* twisty maze... need a forward-declaration here... */
-static void lirc_serial_exit(void);
-
-static int lirc_serial_resume(struct platform_device *dev)
-{
-	unsigned long flags;
-
-	if (hardware_init_port() < 0) {
-		lirc_serial_exit();
-		return -EINVAL;
-	}
-
-	spin_lock_irqsave(&hardware[type].lock, flags);
-	/* Enable Interrupt */
-	do_gettimeofday(&lasttv);
-	soutp(UART_IER, sinp(UART_IER)|UART_IER_MSI);
-	off();
-
-	lirc_buffer_clear(&rbuf);
-
-	spin_unlock_irqrestore(&hardware[type].lock, flags);
-
-	return 0;
-}
-
 static struct platform_driver lirc_serial_driver = {
-	.probe		= lirc_serial_probe,
-	.remove		= __devexit_p(lirc_serial_remove),
-	.suspend	= lirc_serial_suspend,
-	.resume		= lirc_serial_resume,
-	.driver		= {
-		.name	= "lirc_serial",
-		.owner	= THIS_MODULE,
+	.driver = {
+		.name   = LIRC_DRIVER_NAME,
+		.owner  = THIS_MODULE,
 	},
 };
 
@@ -1179,11 +650,12 @@ static int __init lirc_serial_init(void)
 
 	result = platform_driver_register(&lirc_serial_driver);
 	if (result) {
-		printk("lirc register returned %d\n", result);
+		printk(KERN_ERR LIRC_DRIVER_NAME
+		       ": lirc register returned %d\n", result);
 		goto exit_buffer_free;
 	}
 
-	lirc_serial_dev = platform_device_alloc("lirc_serial", 0);
+	lirc_serial_dev = platform_device_alloc(LIRC_DRIVER_NAME, 0);
 	if (!lirc_serial_dev) {
 		result = -ENOMEM;
 		goto exit_driver_unregister;
@@ -1195,17 +667,22 @@ static int __init lirc_serial_init(void)
 
 	return 0;
 
-exit_device_put:
+	exit_device_put:
 	platform_device_put(lirc_serial_dev);
-exit_driver_unregister:
+
+	exit_driver_unregister:
 	platform_driver_unregister(&lirc_serial_driver);
-exit_buffer_free:
+
+	exit_buffer_free:
 	lirc_buffer_free(&rbuf);
+
 	return result;
 }
 
 static void lirc_serial_exit(void)
 {
+	gpio_free(gpio_out_pin);
+	gpio_free(gpio_in_pin);
 	platform_device_unregister(lirc_serial_dev);
 	platform_driver_unregister(&lirc_serial_driver);
 	lirc_buffer_free(&rbuf);
@@ -1213,127 +690,100 @@ static void lirc_serial_exit(void)
 
 static int __init lirc_serial_init_module(void)
 {
-	int result;
+	int result, i;
 
 	result = lirc_serial_init();
 	if (result)
 		return result;
 
-	switch (type) {
-	case LIRC_HOMEBREW:
-	case LIRC_IRDEO:
-	case LIRC_IRDEO_REMOTE:
-	case LIRC_ANIMAX:
-	case LIRC_IGOR:
-		/* if nothing specified, use ttyS0/com1 and irq 4 */
-		io = io ? io : 0x3f8;
-		irq = irq ? irq : 4;
-		break;
-#ifdef CONFIG_LIRC_SERIAL_NSLU2
-	case LIRC_NSLU2:
-		io = io ? io : IRQ_IXP4XX_UART2;
-		irq = irq ? irq : (IXP4XX_UART2_BASE_VIRT + REG_OFFSET);
-		iommap = iommap ? iommap : IXP4XX_UART2_BASE_PHYS;
-		ioshift = ioshift ? ioshift : 2;
-		break;
-#endif
-	default:
-		result = -EINVAL;
-		goto exit_serial_exit;
-	}
-	if (!softcarrier) {
-		switch (type) {
-		case LIRC_HOMEBREW:
-		case LIRC_IGOR:
-#ifdef CONFIG_LIRC_SERIAL_NSLU2
-		case LIRC_NSLU2:
-#endif
-			hardware[type].features &=
-				~(LIRC_CAN_SET_SEND_DUTY_CYCLE|
-				  LIRC_CAN_SET_SEND_CARRIER);
-			break;
+	/* check if the module received valid gpio pin numbers */
+	result = 0;
+	if (gpio_in_pin != gpio_out_pin) {
+		for(i = 0; (i < ARRAY_SIZE(valid_gpio_pins)) && (result != 2); i++) {
+			if (gpio_in_pin == valid_gpio_pins[i] ||
+			   gpio_out_pin == valid_gpio_pins[i]) {
+				result++;
+			}
 		}
 	}
 
-	result = init_port();
-	if (result < 0)
-		goto exit_serial_exit;
-	driver.features = hardware[type].features;
+	if (result != 2) {
+		result = -EINVAL;
+		printk(KERN_ERR LIRC_DRIVER_NAME
+		       ": invalid GPIO pin(s) specified!\n");
+		goto exit_rpi;
+	}
+
+	driver.features = LIRC_CAN_SET_SEND_DUTY_CYCLE |
+			  LIRC_CAN_SET_SEND_CARRIER |
+			  LIRC_CAN_SEND_PULSE |
+			  LIRC_CAN_REC_MODE2;
+
 	driver.dev = &lirc_serial_dev->dev;
 	driver.minor = lirc_register_driver(&driver);
+
 	if (driver.minor < 0) {
-		printk(KERN_ERR  LIRC_DRIVER_NAME
-		       ": register_chrdev failed!\n");
+		printk(KERN_ERR LIRC_DRIVER_NAME
+		       ": device registration failed with %d\n", result);
 		result = -EIO;
-		goto exit_release;
+		goto exit_rpi;
 	}
+
+	printk(KERN_INFO LIRC_DRIVER_NAME ": driver registered!\n");
+
+	result = init_port();
+	if (result < 0)
+		goto exit_rpi;
+
+	if( irq<0 ) {
+		printk(KERN_ERR LIRC_DRIVER_NAME
+		       ": reciever is disabled %d\n", irq);
+		driver.features = LIRC_CAN_SET_SEND_DUTY_CYCLE |
+			  LIRC_CAN_SET_SEND_CARRIER |
+			  LIRC_CAN_SEND_PULSE;
+	}
+
 	return 0;
-exit_release:
-	release_region(io, 8);
-exit_serial_exit:
+
+	exit_rpi:
 	lirc_serial_exit();
+
 	return result;
 }
 
 static void __exit lirc_serial_exit_module(void)
 {
 	lirc_serial_exit();
-	if (iommap != 0)
-		release_mem_region(iommap, 8 << ioshift);
-	else
-		release_region(io, 8);
+
 	lirc_unregister_driver(driver.minor);
-	dprintk("cleaned up module\n");
+	printk(KERN_INFO LIRC_DRIVER_NAME ": cleaned up module\n");
 }
 
-
 module_init(lirc_serial_init_module);
 module_exit(lirc_serial_exit_module);
 
-MODULE_DESCRIPTION("Infra-red receiver driver for serial ports.");
-MODULE_AUTHOR("Ralph Metzler, Trent Piepho, Ben Pfaff, "
-	      "Christoph Bartelmus, Andrei Tanas");
+MODULE_DESCRIPTION("Infra-red receiver and blaster driver for Raspberry Pi GPIO.");
+MODULE_AUTHOR("Aron Robert Szabo <aron@reon.hu>");
+MODULE_AUTHOR("Michael Bishop <cleverca22@gmail.com>");
 MODULE_LICENSE("GPL");
 
-module_param(type, int, S_IRUGO);
-MODULE_PARM_DESC(type, "Hardware type (0 = home-brew, 1 = IRdeo,"
-		 " 2 = IRdeo Remote, 3 = AnimaX, 4 = IgorPlug,"
-		 " 5 = NSLU2 RX:CTS2/TX:GreenLED)");
-
-module_param(io, int, S_IRUGO);
-MODULE_PARM_DESC(io, "I/O address base (0x3f8 or 0x2f8)");
-
-/* some architectures (e.g. intel xscale) have memory mapped registers */
-module_param(iommap, bool, S_IRUGO);
-MODULE_PARM_DESC(iommap, "physical base for memory mapped I/O"
-		" (0 = no memory mapped io)");
-
-/*
- * some architectures (e.g. intel xscale) align the 8bit serial registers
- * on 32bit word boundaries.
- * See linux-kernel/serial/8250.c serial_in()/out()
- */
-module_param(ioshift, int, S_IRUGO);
-MODULE_PARM_DESC(ioshift, "shift I/O register offset (0 = no shift)");
-
-module_param(irq, int, S_IRUGO);
-MODULE_PARM_DESC(irq, "Interrupt (4 or 3)");
-
-module_param(share_irq, bool, S_IRUGO);
-MODULE_PARM_DESC(share_irq, "Share interrupts (0 = off, 1 = on)");
+module_param(gpio_out_pin, int, S_IRUGO);
+MODULE_PARM_DESC(gpio_out_pin, "GPIO output/transmitter pin number of the BCM"
+		 " processor. Valid pin numbers are: 0, 1, 4, 8, 7, 9, 10, 11,"
+		 " 14, 15, 17, 18, 21, 22, 23, 24, 25, 29 default 29");
+
+module_param(gpio_in_pin, int, S_IRUGO);
+MODULE_PARM_DESC(gpio_in_pin, "GPIO input pin number of the BCM processor."
+		 " Valid pin numbers are: 0, 1, 4, 8, 7, 9, 10, 11, 14, 15,"
+		 " 17, 18, 21, 22, 23, 24, 25, 29 default 7");
 
 module_param(sense, bool, S_IRUGO);
 MODULE_PARM_DESC(sense, "Override autodetection of IR receiver circuit"
 		 " (0 = active high, 1 = active low )");
 
-#ifdef CONFIG_LIRC_SERIAL_TRANSMITTER
-module_param(txsense, bool, S_IRUGO);
-MODULE_PARM_DESC(txsense, "Sense of transmitter circuit"
-		 " (0 = active high, 1 = active low )");
-#endif
-
 module_param(softcarrier, bool, S_IRUGO);
 MODULE_PARM_DESC(softcarrier, "Software carrier (0 = off, 1 = on, default on)");
 
 module_param(debug, bool, S_IRUGO | S_IWUSR);
 MODULE_PARM_DESC(debug, "Enable debugging messages");
+
